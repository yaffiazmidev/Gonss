# Uncomment the next line to define a global platform for your project
platform :ios, '13.0'

# Comment the next line if you don't want to use dynamic frameworks
use_frameworks!

source 'https://github.com/CocoaPods/Specs.git'

enable_memory_leak_tracer = false

def tencent_video_player_depend
  pod 'Masonry', '~> 1.1'
  pod 'SDWebImage', '~> 5.18'
end

def tencent_video_player
  tencent_video_player_depend
  pod "TUIPlayerCore", :path => "SDK/TUIPlayer/TUIPlayerCoreSDK/"
  pod "TUIPlayerShortVideo", :path => "SDK/TUIPlayer/TUIPlayerShortVideoSDK/"
end

def live_streaming
  pod 'TUICore'
end

def tencent_call
  pod 'TUICallKit-Swift', :path => "SDK/TUICallKit/", :subspecs => ["Professional"]
  pod 'TUICallKitVoIPExtension/Professional', '2.2.0.860'
end

def uploader
  pod 'AliyunOSSiOS' # Alibaba OSS
#  pod 'QCloudCOSXML', '6.3.7' # Tencent COS
  pod 'QCloudQuic', '6.3.7' # Tencent VOD
  pod 'QCloudCOSXML/Slim','6.3.8'
end

def mem_leak_tracer
  pod 'MLeaksFinder'
  pod 'FBRetainCycleDetector'
end

# ignore all warnings from all pods
inhibit_all_warnings!

workspace 'KipasKipas'

target 'KipasKipas' do
  use_frameworks!
  project 'KipasKipas'
  
  pod 'TXLiteAVSDK_Professional', :path => "SDK/TXLiteAVSDK_Professional/"
  # Pods for KipasKipas
  pod 'Alamofire', '~> 5.1'
  pod 'ContextMenu'
  pod 'OneSignalXCFramework', '3.2.0'
  pod 'IQKeyboardManagerSwift'
  #pod 'LookinServer', :subspecs => ['SwiftAndNoHook']
  # RxSwift
  pod 'RxSwift'
  pod 'RxCocoa'
  pod 'RxAlamofire'
  pod 'RxDataSources'

  # Combine
  pod 'CombineCocoa'
  pod 'CombineDataSources'

  # Debugger
  pod 'Wormholy', :configurations => ['Debug', 'Staging', 'ProdDebug']

  # Gmaps
  pod 'GoogleMaps', '5.0.0'
  pod 'GooglePlaces', '5.0.0'

  # IGListKit
  pod 'IGListKit', '~> 4.0.0'

  # NVActivityIndicatorView
  pod 'NVActivityIndicatorView'

  pod 'ModernAVPlayer'

  # pod 'HLSCachingReverseProxyServer'
  pod "GCDWebServer", "~> 3.0"

  pod 'VersaPlayer'
  pod 'Cosmos', '~> 23.0'

  # Uploader
  uploader

  pod 'Branch'

  # Tencent Player
  tencent_video_player
  pod 'JSONWebToken'
  pod 'Queuer'

  # Live Stream
  live_streaming

  # Memory Leak Tracer
  mem_leak_tracer

  # Tencent Voice & Video Call
  tencent_call
end

target 'KipasKipasNotificationServiceExtension' do
  use_frameworks!
  # only copy below line
  pod 'OneSignalXCFramework', '3.2.0'
end

# KipasKipasFeed
target 'KipasKipasFeed' do
  use_frameworks!
  project 'Modules/KipasKipasFeed/KipasKipasFeed'
   
  tencent_video_player
  pod 'VersaPlayer'
  pod 'JSONWebToken'
  pod 'Queuer'

  target 'KKCleepsApp' do
    pod 'Alamofire', '~> 5.1'
    pod 'RxAlamofire'
    pod "GCDWebServer", "~> 3.0"
    pod 'RxSwift'
    pod 'RxCocoa'
  end

  target 'FeedCleeps' do
    pod 'SnapKit', '5.7.1'
    pod 'Alamofire', '~> 5.1'
    pod 'RxAlamofire'
    pod "GCDWebServer", "~> 3.0"
    pod 'RxSwift'
    pod 'RxCocoa'
    pod 'NVActivityIndicatorView'
    pod 'TXLiteAVSDK_Professional', :path => "SDK/TXLiteAVSDK_Professional/"
  end

  target 'KKPlayerApp' do
    pod 'Alamofire', '~> 5.1'
    pod 'RxAlamofire'
    pod "GCDWebServer", "~> 3.0"
    pod 'RxSwift'
    pod 'RxCocoa'
    pod 'NVActivityIndicatorView'
    pod 'Queuer'
  end
end

target 'KipasKipasLiveStream' do
  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!
  project 'Modules/KipasKipasLiveStream/KipasKipasLiveStream'

  target 'KipasKipasTRTC' do
    pod 'TXLiteAVSDK_Professional', :path => "SDK/TXLiteAVSDK_Professional/"
    live_streaming
  end

  target 'KKLiveStreamingMicroApps' do
    pod 'TXLiteAVSDK_Professional', :path => "SDK/TXLiteAVSDK_Professional/"
    uploader
    live_streaming
  end
end

target 'KipasKipasDirectMessage' do
  use_frameworks!
  project 'Modules/KipasKipasDirectMessage/KipasKipasDirectMessage'

  tencent_call

  target 'KipasKipasDirectMessageUI' do
  end
  
  target 'KipasKipasDirectMessageApp' do
    tencent_call
  end

end

target 'KipasKipasCall' do
  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!
  project 'Modules/KipasKipasCall/KipasKipasCall'

  tencent_call

  target 'KipasKipasCallApp' do
    tencent_call
    uploader
    pod 'Alamofire', '~> 5.1'
    pod 'RxAlamofire'
    pod "GCDWebServer", "~> 3.0"
    pod 'RxSwift'
    pod 'RxCocoa'
    pod 'NVActivityIndicatorView'
    pod 'VersaPlayer'
    pod 'JSONWebToken'
    pod 'Queuer'
    tencent_video_player
  end
end

target 'KipasKipasLogin' do
  
  use_frameworks!
  project 'Modules/KipasKipasLogin/KipasKipasLogin'
  
  target 'KKLoginMicroApps' do
    uploader
  end
end

target 'KipasKipasRegister' do
  
  use_frameworks!
  project 'Modules/KipasKipasRegister/KipasKipasRegister'
  
  target 'KipasKipasRegisterApp' do
    uploader
  end
end

target 'KipasKipasNetworking' do
  use_frameworks!
  project 'Modules/KipasKipasNetworking/KipasKipasNetworking'

  target 'KipasKipasNetworkingUtils' do
    uploader
  end

end

target 'KipasKipasVerificationIdentity' do
  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!
  project 'Modules/KipasKipasVerificationIdentity/KipasKipasVerificationIdentity'

  target 'KipasKipasVerificationIdentityApp' do
    uploader
  end
end

post_install do |installer|
  setup_memory_leak_tracer(enable_memory_leak_tracer)

  installer.pods_project.targets.each do |target|

    if target.name == "Pods-KipasKipas"
      remove_other_ldflags(
        target,
        [
          "BeaconAPI_Base", # Dependency QCloudCOSXML
          "QCloudCOSXML",
          "QCloudCore", # Dependency QCloudCOSXML
          "QimeiSDK", # Dependency QCloudCOSXML
          "QCloudQuic",
#          "TXFFmpeg", # Dependency TXLiteAVSDK_Player
#          "TXSoundTouch", # Dependency TXLiteAVSDK_Player
          # "TXLiteAVSDK_Player",
#          "TUIPlayerCore",
#          "TUIPlayerShortVideo",
#          "TXLiteAVSDK_Professional"
        ]
      )
    end

    if target.name == "Pods-KipasKipasCall-KipasKipasCallApp"
      remove_other_ldflags(
        target,
        [
          "BeaconAPI_Base", # Dependency QCloudCOSXML
          "QCloudCOSXML",
          "QCloudCore", # Dependency QCloudCOSXML
          "QimeiSDK", # Dependency QCloudCOSXML
          "QCloudQuic",
        ]
      )
    end

    target.build_configurations.each do |config|
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ""
      config.build_settings['CODE_SIGNING_REQUIRED'] = "NO"
      config.build_settings['CODE_SIGNING_ALLOWED'] = "NO"
      config.build_settings['GENERATE_INFOPLIST_FILE'] = "NO"
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
    end
  end
end

def remove_other_ldflags(target, frameworks_to_remove)
  pods_directory = "#{Dir.pwd}/Pods/Target Support Files/#{target.name}"

  target.build_configurations.each do |config|
    file_path = "#{pods_directory}/#{target.name}.#{config.name.downcase}.xcconfig"

    if File.exist?(file_path)
      file_content = File.read(file_path)

      frameworks_to_remove.each do |framework|
        file_content = file_content.gsub(/OTHER_LDFLAGS = (.*?)(\s+-framework "#{framework}")/, 'OTHER_LDFLAGS = \1')
      end

      File.open(file_path, 'w') { |file| file.puts file_content }

      puts "File content #{target.name}.#{config.name.downcase}.xcconfig updated."
    else
      puts "File not found: #{file_path}"
    end

  end
end

def setup_memory_leak_tracer(enable)
  enable_num = enable ? 1 : 0

  file_path = "#{Dir.pwd}/Pods/MLeaksFinder/MLeaksFinder/MLeaksFinder.h"

  if File.exist?(file_path)
    File.chmod(0777, file_path)
    file_content = File.read(file_path)

    file_content.gsub!(/#define MEMORY_LEAKS_FINDER_ENABLED \d/, "#define MEMORY_LEAKS_FINDER_ENABLED #{enable_num}")
    file_content.gsub!(/#define MEMORY_LEAKS_FINDER_RETAIN_CYCLE_ENABLED \d/, "#define MEMORY_LEAKS_FINDER_RETAIN_CYCLE_ENABLED #{enable_num}")

    File.open(file_path, 'w') { |file| file.puts file_content }
  end
end
